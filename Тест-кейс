Тест-кейсы и атрибуты тест-кейсов

Дословно test case переводят как «тестовый случай» или «тестовый сценарий».

Тестовый случай (test case) — это совокупность шагов, конкретных условий и параметров, необходимых для проверки реализации тестируемой функции или её части.
Тестовый случай — набор предварительных условий, входных данных, действий (где применимо), ожидаемых результатов и постусловий, разработанных на тестовых условиях.
Другими словами, тест-кейс — это небольшая инструкция, с помощью которой можно проверить работу функции. В этой инструкции описано, какие шаги нужно выполнить (какие кнопки нажать, чек-боксы активировать, данные внести), чтобы проверить работу участка системы, и какой результат должен быть у каждого шага.
Тест-кейсы обычно пишут тестировщики или тест-дизайнеры. Чтобы составить качественные тест-кейсы, надо знать и использовать базовые техники тест-дизайна — разбиение на классы эквивалентности и анализ граничных значений.


Тест-кейсы используют, чтобы:
•	структурировать и систематизировать подход к тестированию — тест-кейсы позволяют оценить объём предстоящей работы, распределить время задачи между тестировщиками в команде, не пропустить важных проверок;
•	вычислять метрики тестового покрытия — наличие тест-кейсов позволяет оценить, какой процент требований будет протестирован, а на какие требования тесты ещё не созданы;
•	принимать меры по увеличению тестового покрытия — если тест-кейсов недостаточно, чтобы протестировать большую часть требований, то нужно добавить дополнительные;
•	отслеживать соответствие ситуации плану — при наличии тест-кейсов легко контролировать тестирование: сколько тестов уже выполнено, какие из них прошли успешно, сколько осталось проверить, а также какая функциональность уже была протестирована хотя бы частично, а какая ещё не тестировалась;
•	поддерживать взаимопонимание между заказчиком, разработчиками и тестировщиком — написание тест-кейсов часто приводит к дополнительным вопросам по работе приложения, и это позволяет закрыть пробелы в знаниях о системе, а также устранить недопонимание с заказчиком или разработчиком;
•	хранить информацию для длительного использования и обмена опытом между сотрудниками и командами — тест-кейсы служат задокументированными инструкциями по работе системы. С их помощью удобно передавать знания о системе другим членам команды, а также обращаться к ним при решении спорных вопросов — при условии, что тест-кейсы написаны качественно и корректно.
•	проводить регрессионное тестирование — оно базируется на многократном повторении уже проведённых тестов. В этом случае наличие тест-кейсов помогает делать повторные проверки регулярными и полноценными.
•	повышать качество требований — при написании тест-кейсов уточняются многие вопросы по содержанию требований, а также обнаруживаются ошибки в их логике и неполнота.
•	быстро вводить в курс дела нового сотрудника — наличие тест-кейсов облегчает для нового сотрудника работу с приложением. Основываясь на шагах тест-кейса и ожидаемом результате, проще понять специфику работы приложения.


У тест-кейса есть обязательные атрибуты, которые должны быть заполнены. Уточним, что для тест-кейсов выделяют два этапа:
•	этап проектирования (планирования) и создания;
•	этап исполнения.
Сначала рассмотрим атрибуты, характерные для этапа проектирования и создания тест-кейсов.



Атрибуты тест-кейсов
 
Обязательными атрибутами на данном этапе будут:
1.	Номер/идентификатор тест-кейса — как правило, присваивается автоматически, зависит от особенностей проекта, может содержать зашифрованные данные о требовании, которое он проверяет, а также другую информацию, представленную в числовом виде.
2.	Название тест-кейса — краткое описание сценария, который проверяет данный тест-кейс.
3.	Шаги для выполнения тест-кейса — порядок действий, чтобы проверить работу функции или выполнение сценария.
4.	Ожидаемый результат — как должна вести себя система после определённых действий. Должен быть описан для каждого шага тест-кейса.
 
Также в тест-кейсе могут присутствовать дополнительные атрибуты, наличие которых зависит от специфики проекта:
1.	Приоритет тест-кейса — зависит от приоритета функций и сценариев, которые он проверяет.
2.	Тип тест-кейса (позитивный или негативный) — проверяет ли тест-кейс позитивный сценарий, при котором система должна работать согласно требованиям, или негативный, при котором проверяется, как система обрабатывает некорректные действия пользователей.
3.	Тестовые данные — данные, используемые для проверки, могут быть указаны в шагах тест-кейса или вынесены (например, в отдельный файл, в котором их удобно редактировать) с указанием ссылки на них.
4.	Предусловия — действия, которые нужно выполнить, прежде чем приступать к тест-кейсу, а также настройки приложения и тестовой среды. Например, пройти авторизацию для пользователя с правами администратора.
5.	Постусловия — выполнение тест-кейса, как правило, переводит систему из одного состояния в другое (изменяются настройки, производятся расчёты). В некоторых случаях требуется вернуть систему в состояние «по умолчанию», например пройти деавторизацию, чтобы в системе не было зарегистрированных пользователей, вернуть прежние настройки. Состояние, в которое нужно привести систему после прохождения тест-кейса, указывается в постусловии. Оно необходимо, чтобы другие тестировщики могли проходить тест-кейсы, а внесённые ранее изменения не сказались на результатах проверок.

На этапе исполнения тест-кейса добавляются атрибуты:
1.	Фактический результат — как и ожидаемый, указывается для каждого шага тест-кейса. Если фактический результат совпадает с ожидаемым, то в графе с фактическим ставится статус passed. Если результат отличается от ожидаемого — статус failed. В этом случае тест-кейс считается неуспешным и получает статус failed, а тестировщик создаёт отчёт о дефекте. Если это предусмотрено процессом работы, то к тест-кейсу добавляется ссылка на дефект, который обнаружен при его исполнении.
2.	Статус тест-кейса — обозначает результат исполнения тест-кейса или причину, по которой он не может быть исполнен.

Статусы тест-кейсов (могут отличаться в зависимости от проекта):
•	passed — все шаги проверены, всё на 100% работает и соответствует ожиданию. Комментарий писать не нужно;
•	failed — поведение не соответствует ожиданию, найден новый дефект. Комментарий писать обязательно. Если в тест-кейсе найдено сразу несколько новых дефектов, в комментарии нужно описать все;
•	known bug — поведение не соответствует ожиданию, найден известный дефект. Комментарий писать обязательно — указать тест-кейс, в котором данный дефект был найден ранее;
•	broken — тест-кейс нуждается в редактировании. Например, в нём есть неизвестные термины, битые ссылки, серьёзные неточности, из-за которых невозможно его выполнить, он непонятен. Комментарий писать обязательно — указать, почему тест-кейс некорректен;
•	blocked — выполнение тест-кейса невозможно из-за дефекта, который его блокирует. Комментарий писать обязательно;
•	skipped — тест-кейс пропущен. Например, в кейсе указано дополнительное условие, которое делает невозможным его прохождение (обращение к компоненту, который не будет реализован). Комментарий писать обязательно.



Правила работы с тест-кейсами
Чтобы тестирование было эффективным и повышало качество тестируемого продукта, важно тщательно прорабатывать используемые для проверок тест-кейсы.
Правила, которые нужно соблюдать, чтобы создавать качественные тест-кейсы:
1.	Один тест-кейс — одна проверка. Любой тест-кейс должен проверять только один сценарий и иметь чёткую цель.
2.	Заголовок описывает суть тест-кейса. Важно правильно формулировать заголовок тест-кейса, чтобы по нему можно было определить, в чём заключается суть проверки, и исключить создание дубликатов.
3.	Точные названия для элементов приложения (кнопок, чек-боксов, элементов меню). Формулировки важны, так как тест-кейсы будут использовать разные люди — всем должно быть понятно их содержание.
4.	Простой технический стиль без объяснений базовых понятий работы ПО. Предполагается, что специалисты в IT-компаниях достаточно грамотны, поэтому не стоит подробно описывать очевидные вещи, например как сохранить приложение или где искать кнопку завершения его работы.
5.	Все необходимые действия для проверки сценария изложены. Любой пропущенный шаг в тест-кейсе может отразиться на его результате, поэтому нужно быть внимательным при описании всех предполагаемых действий. Но важно и соблюдать баланс, не превращая тест-кейс в подробное описание каждого шага.
6.	Нет зависимостей от других тест-кейсов. Тест-кейсы могут изменяться и дополняться в процессе использования. При наличии зависимых тест-кейсов изменение одного из них может существенно нарушить работу другого. Об этом, скорее всего, не будет известно тестировщику — отследить такие изменения трудно из-за большого количества тест-кейсов на проектах.
7.	Не дублей с другими тест-кейсами.
8.	Обнаруженная ошибка становится очевидной. Шаги тест-кейса и ожидаемые результаты должны быть описаны таким образом, чтобы отклонение от них явно свидетельствовало о дефекте.
9. Гибкость для модификации. В тест-кейсе легко добавить, изменить или
убрать шаг, в том числе в середине теста, можно изменить тестовые
данные. Тогда тест-кейсы можно использовать многократно. Требования
на проектах могут периодически изменяться, и приходится вносить
изменения в тест-кейсы. Об этом нужно обязательно помнить при
написании тест-кейсов — и, по возможности, делать их максимально
гибкими. Например, выносить тестовые данные отдельным файлом. Или
объединять повторяющиеся шаги нескольких тест-кейсов в один тест-
кейс и ссылаться на него в предусловии.



Основные ошибки, которые чаще всего допускают при создании тест-кейсов.

Ошибки оформления и формулировок:
•	заголовок тест-кейса отсутствует или некорректно сформулирован;
•	отсутствует нумерация шагов и (или) ожидаемых результатов;
•	ссылки ведут на разные или недействительные требования;
•	использованы личные формы глаголов («нажми», «перейдите», «укажи»);
•	использовано будущее или прошедшее время в описании ожидаемых результатов («страница загрузится», «данные были получены»);
•	постоянное использование слова «проверить» в заголовке, шагах или ожидаемых результатах;
•	пунктуационные, орфографические, синтаксические ошибки.

Логические ошибки:
•	ссылка на другие тест-кейсы или их шаги — тест-кейс должен быть независимым, иначе удаление или изменение связанных тест-кейсов может нарушить его работу;
•	детализация, не соответствующая уровню функционального тестирования, — для тест-кейсов, входящих в наборы для дымового тестирования, достаточно общих шагов без детализации. Она требуется уже на уровне тестирования критического пути;
•	расплывчатые двусмысленные описания действий и ожидаемых результатов;
•	«выдумывание» особенностей поведения приложения (без отсылки к требованиям);
•	не описано приготовление к выполнению тест-кейса, если необходимы предусловия;
•	полное дублирование (копирование) одного тест-кейса на уровнях дымового тестирования, тестирования критического пути, расширенного тестирования.

Наборы тест-кейсов
Тест-кейсы могут быть объединены в наборы по тематике, проверяемому модулю или тестовому циклу, в котором они должны быть выполнены.
Набор тест-кейсов (test case suite, test suite, test set) — совокупность тест-кейсов, выбранных с общей целью или по общему признаку. Иногда в такой совокупности результаты завершения одного тест-кейса становятся входным состоянием приложения для следующего тест-кейса.
 
Наборы тест-кейсов могут быть последовательными и свободными. В последовательных наборах каждый следующий тест-кейс зависит от результата предыдущего. Преимущество таких наборов в том, что каждый следующий тест-кейс в наборе в качестве входных данных приложения получает результат работы предыдущего тест-кейса. Это позволяет сократить количество шагов в отдельных тест-кейсах. Кроме того, такие последовательные действия точнее имитируют работу пользователей. В свободных наборах тест-кейсы могут выполняться в произвольном порядке. В этом случае неудачное выполнение предыдущего тест-кейса не блокирует работу следующего — и тестировщик может проходить их в любом удобном порядке.

