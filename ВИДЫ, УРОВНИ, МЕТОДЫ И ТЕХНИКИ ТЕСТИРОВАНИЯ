ВИДЫ, УРОВНИ, МЕТОДЫ И ТЕХНИКИ ТЕСТИРОВАНИЯ
Так получилось, что уровни, методы, виды, типы и техники тестирования перемешалиись в головах тестировщиков в одну большую кашу.
В данной статье мы постарались облегчить жизнь всем и систематизировать эти понятия в соответствии с ISTQB.


1. Уровни тестирования:
Уровни тестирования по детализации (Test Levels by detalization):
•	Компонентное тестирование (component\module\unit testing)
•	Интеграционное тестирование (integration testing)
•	Системное тестирование (system testing)
•	Приёмочное тестирование (acceptance testing)
•	Пользовательское приёмочное тестирование (User acceptance testing)
•	Эксплуатационное приёмочное тестирование (Operational acceptance testing)
•	Альфа-тестирование (Alpha testing)
•	Бета-тестирование (Beta testing)
Уровни тестирования по приоритету (Test Levels by priority):
Согласно ISTQB, нижеперечисленное не является уровнями тестирования. Но многие тестировщики относят к их к уровням, поэтому упомянем их в этой секции.
•	Смоук тестирование (Smoke testing)
•	Тестирование критического пути (Critical path testing)
•	Тестирование расширенного пути (Extended path testing)


2. Цели тестирования:
Чтобы назвать что-то видом тестирования, это понятие должно преследовать одну из нижеперечисленных целей:
1.	Оценить функциональные характеристики качества ПО: полнота, правильность, целесообразность ◦
2.	Оценить нефункциональные характеристики качества ПО: надёжность, производительность, безопасность, совместимость, удобство и тд.
3.	Оценить структуру и архитектуру ПО
4.	Оценить последствия изменений



2.0. Виды тестирования характеристик качества (часто называют «по объекту»):
•	Функциональное тестирование (Functional testing) – Тестирование ПО, направленное на проверку того, что компонент либо система соответствует функциональным требованиям.
•	Нефункциональное тестирование (Non-functional testing) – тестирование КАК система работает.

2.1. Виды функционального тестирования:
•	Тестирование функциональной корректности (Functional correctness testing) -Анализ функций приложение на корректность, правильность расчётов и соответствие указанным или подразумеваемым требованиям. Проводится на всех уровнях тестирования.
•	Тестирование функциональной пригодности\целесообразности (Functional appropriateness testing) - Анализ пригодности функций приложения для выполнения какой-то бизнес задачи. Обычно проводится на системном уровне тестирования, но может и проводиться на поздних стадиях интеграционного уровня тестирования
•	Тестирование функциональной полноты (Function completeness testing) - Анализ степени, в которой набор функций покрывает все указанные задачи и цели пользователя. Проводится на всех уровнях тестирования.

2.2. Виды нефункционального тестирования:
•	Тестирование защищённости (Security testing) - Тестирование с целью оценить защищенность программного продукта.
•	Тестирование безопасности (Safety testing) - Тестирование программного продукта с целью с целью определить его безопасность.
•	Тестирование производительности (Performance testing) - Процесс тестирования с целью определить производительность программного продукта.
•	Нагрузочное тестирование (Load testing) - Вид тестирования производительности, проводимый с целью оценить поведение компонента или системы под увеличивающейся нагрузкой (число одновременно работающих пользователей и/или число транзакций) для определения максимально допустимого уровня нагрузки для исследуемого компонента или системы.
•	Стрессовое тестирование (Stress testing) - Вид тестирования производительности, оценивающий систему или компонент на граничных значениях рабочих нагрузок или за их пределами, или же в состоянии ограниченных ресурсов, таких как память или доступ к серверу.
•	Тестирование графического интерфейса (GUI testing) - Анализ соответствия графического пользовательского интерфейса программы спецификациям, макетам, прототипам, стандартам.
•	Тестирование удобства использования (Usability testing) - Исследование, выполняемое с целью определения, удобна ли программа для ее предполагаемого применения и основанное на стандартах, лучших практиках и привлечении пользователей в качестве тестировщиков и суммировании и анализе полученных от них выводов.
•	Тестирование доступности (Accessibility testing) - Тестирование, направленное на определение степени легкости, с которой пользователи с ограниченными способностями могут использовать систему или ее компоненты
•	Тестирование совместимости (Compatibility testing)
•	Тестирование кроссбраузерности (Cross browser testing) - Вид тестирования совместимости, направленный на анализ работы приложения в разных браузерах либо разных версиях одного браузера.
•	Тестирование кроссплатформенности (Cross platform testing) - Анализ работы одного и того же приложения на разных операционных системах\платформах.
•	Тестирование инсталляции (Installation testing) - Тестирование, направленное на проверку процессов установки, удаления, восстановления, обновления, лицензирования.
•	Тестирование интернационализации (Internationalization testing) - Анализ приложения и его интерфейса на способность быть переведённым.
•	Тестирование локализации (Localization testing) -  Анализ приложения и его сопроводительной документации на корректность в конкретной переведённой среде.

2.3. Виды тестирования структуры и архитектуры ПО
•	Структурное тестирование (Метод белого ящика  (White-box testing)) – детальное изучение логики программы и подборе тестов.

2.4. Виды тестирования по изменениям:
•	Дымовое тестирование – цикл тестов, подтверждающий что приложение стартует и выполняет осн.ф-ции.
•	Тестирование нового функционала (New feature testing) – определ.соотв.выпущенной версии критериям качества для начала тестирования.
•	Перепроверка дефекта (Retest, Defect validation) – после устранения дефектов.
•	Регрессионное тестирование (Regression testing) – проверка изменений сделанных в прилож.для проверки что новая версия программы не содержит дефектов в областях, не подвергавшихся изменениям.
Что НЕ является видами тестирования, но часто туда относят:
•	Ручное тестирование (Manual testing)
•	Автоматическое тестирование (Automated testing)
•	Статическое тестирование (Static testing)
•	Динамическое тестирование (Dynamic testing)
Все они не преследуют ни одну из 4 целей видов тестирования. Следственно, они ими и не являются.


3. Методы тестирования:
•	Статистический метод – вид тест.ПО. Без запуска приложения.
•	Динамический метод с запуском программы:
•	Чёрный ящик (Black-box testing) – функцион. тестирование на соотв.программ.продукта требованиям без знания внутр.структуры реализ.системы.
•	Белый ящик (White-box testing) – структурное тест.на соответств.програм.продукта со знанием внутр.структуры реализ.сис-мы
•	Серый ящик (Gray-box testing) – комбинир.методов, есть доступ к исходному коду, но при выполн.тестов этот доступ не требуется


4. Техники тестирования:
Техники тестирования метода чёрного ящика:
•	Эквивалентное разбитие (Equivalence partitioning)
•	Анализ граничных значений (Boundary value analysis)
•	Анализ доменов (Domain analysis)
•	Тестирование всех пар (All pairs testing, Pairwise)
•	Тестирование таблицы решений (Decision table testing)
•	Тестирование диаграмы переходов состояний (State transition testing)
•	Графики причинно-следственных связей (Cause-Effect Graphing)
•	Тестирование сценариев использования (Use Case Testing)
•	Тестирование историй использования (User Story Testing)
Техники тестирования метода белого ящика:
•	Тестирование покрытия операторов (Statement testing and coverage)
•	Тестирование покрытия условий и решений (Decision testing and coverage)
•	Тестирования покрытия условий и значений операторов (The value of statement and decision testing)
Техники основанные на опыте:
•	Предугадывание ошибок (Error guessing)
•	Исследовательское тестирование (Exploratory testing)
•	Свободное тестирование (Ad-hoc testing
•	Тестирование по чеклистам (Checklist-based testing)
Техники тестирования основанные на дефектах:
•	Таксономии дефектов (Defect taxonomies) – Иерархическая система категорий, разработанная для помощи в классификации дефектов.


Небольшое пояснение про White-box testing.
Как вы могли заметить, White-box testing входит сразу в виды, методы и техники тестирования.
Давайте немного уточним.
White-box testing как:
•	Вид тестирования: ставит целью тестирования исходный код и архитектуру.
•	Метод тестирования: определяет, что продукт будет тестироваться через исходный код.
•	Техники тестирования: предлагают различные способы тестирования исходного кода.

