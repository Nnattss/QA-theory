Что такое баг репорт (bug report)?
Баг Репорт (Bug Report) — документ, содержащий отчет о любом недостатке в компоненте или системе, который может привести компонент или систему к невозможности выполнить требуемую функцию. [IEEE 829]
________________________________________
Мы уже знаем, что такое баг, поэтому определение можно упростить.
Баг Репорт (Bug Report) — документ, содержащий информацию о найденном баге.
Другие названия этого документа:
1.	баг-репорт
2.	отчет о дефекте
3.	defect report
Зачем нужны баг репорты?
Почему баги нельзя исправлять сразу, зачем писать отчеты? Лишняя работа, только время тратить… — типичный менеджер, который не слышал о качестве


Написание баг репортов — чрезвычайно полезный процесс, потому что:

1. Происходит фиксации факта существования бага
Есть репорт — есть прецедент для реакции.
Нет репорта — никто ничего не будет делать.
Именно поэтому не стоит писать баги в скайп / чат / говорить лично и т.п.
Есть вероятность, что о нем забудут (и вы, в том числе) и не исправят. 
Потом баг найдет либо заказчик в ходе приемочного тестирования, либо клиент — и вряд ли они будут этому рады… Вы тоже не будете рады, когда разработчик скажет, что он впервые это видит.

2. Баг репорт помогает разработчику
Для воспроизведения и последующего исправления бага разработчикам нужна информация. Она должна быть максимально точной, полной и понятной. Без нее разработчику придется тратить время на поиск и анализ ошибки, и вряд ли он будет этому рад. Да и менеджмент не будет рад, так как разработчик будет заниматься не разработкой, а чем-то другим… 
В докладе Егора Бугаенко Testing and Testers на TestCon 2020, именно об этом был 4-ый вопрос и объяснения, почему это важно. Рекомендую посмотреть  

3. Появляется возможность приоритизации исправлений
Если у вас есть несколько багов — вам всегда придется выбирать, какой из них исправлять в первую очередь, потому что все сразу исправить не получится. 

4. Появляется возможность анализа ошибок
Имея информацию о найденных дефектах Вы можете определять первопричины их возникновения и вносить изменения в рабочие процессы, чтоб их предотвращать. (Привет QA)

5. Тестировщик содействует устранению бага
Хорошо созданный баг репорт — это огромная помощь разработчику, так как из полученной информации он быстро сможет определить, где находится ошибка и исправить ее.

6. Появляется возможность контроля этапа исправления бага
Вы уже знаете, что до момента исправления, каждый баг проходит через определенные стадии жизненного цикла. 
Наличие отчета о дефекте с изменяющимся статусом позволяет легко и быстро определять точное “положение” бага и контролировать его исправление.

7. Появляется возможность оценки качества продукта в текущий момент времени
Если в ходе тестирования было найдено 50 багов и все они были оформлены как баг репорты — вы, как менеджер, сможете оценивать готовность продукта, оценивать объем требуемых доработок, принимать решения о релизе и т.п.

Отчеты о дефектах дают командам очень полезную и важную информацию, которая необходима для контроля качества продукта.
Именно поэтому навык написания хороших отчетов критически важен для любого профессионала-тестировщика и его нужно освоить в совершенстве.


Атрибуты баг репорта
Баг репорт — это технический документ. 
У него есть некий набор атрибутов (полей, параметров) для структуризации информации.

Атрибуты баг репорта можно разделить на 2 группы:
1.	Основные — содержат обязательную информацию, которая должна присутствовать в описании каждого бага
2.	Дополнительные — дают дополнительную информацию, которая помогает разработчику быстрее локализовать и найти ошибку

Основные поля
•	ID — уникальный идентификатор бага
•	Заголовок / Краткое описание / Тема / Summary / Title — четко и кратко описывает суть бага. Оформляется в виде одного предложения, состоящего из трех частей отвечающих на вопросы “Что? Где? Когда?”. Редко бывает, что ответ на вопрос “Где?” или “Когда?” может опускаться, если он не дает полезной информации. (примеры заголовков можно найти в разделе Серьезность)
•	Шаги к воспроизведению — четкое, последовательное описание шагов / действий, которые необходимо совершить, чтоб воспроизвести баг со всей необходимой информацией
•	Фактический результат — результат, который мы видим
•	Ожидаемый результат — результат, который мы хотели / ожидали увидеть
•	Серьезность — показывает, насколько серьезные последствия от дефекта с точки зрения влияния на систему (см. раздел Серьезность)

Дополнительные поля
•	Скриншот / видео — изображение / видео, которое четко и наглядно демонстрирует баг. Если видео или скриншот сделан качественно, его может быть достаточно для понимания сути ошибки и ее исправления
•	Требование — ссылка на требование, которое не соблюдено. Наличие этой информации в 99% случаев предотвращает разговор “баг — не баг” и испорченное настроение  
•	Тип бага — для анализа “слабых” мест в ПО, баги могут разделять на типы (см. Тип бага)
•	Приоритет — очередь, в которой баг будет исправляться (Высокий -> Средний -> Низкий)
•	Дополнительные файлы — файлы, которые нужны для воспроизведения бага (файлы определенного размера, типа, логи и т.п.)
•	Окружение — информация об окружении, на котором воспроизводится баг (версия браузера, операционная система, размер экрана, тестовый сервер и т.п.)
•	Статус — текущий статус бага в его жизненном цикле (Открыт, В работе…)
•	Автор — человек, который создал баг (нужен для уточнения информации, если потребуется)
•	Исполнитель — человек, которые работает над багом в данный момент времени
•	Комментарии — обсуждение исправления ошибки
•	Версия — версия ПО, в которой был обнаружен баг
•	Версия исправления — версия ПО, в которую будет добавлено исправление бага


Серьезность бага (Bug Severity)
Серьезность характеризует уровень влияния бага на работоспособность приложения / компонента и необходима для дальнейшего проставления приоритета. 
Приведенные ниже уровни — не стандартизированы и могут отличаться в разных компаниях.


S4 | Blocker
Блокирующий — баг описывает ситуации, когда ПО не работает в принципе.
Примеры:
1.	Не открываются страницы сайта (показывается белый фон / 404 / 50Х ошибка)
2.	Не запускается мобильное приложение после нажатия на иконку на рабочем столе
3.	Зависает интерфейс приложения после нажатия на кнопку «купить» (кнопки перестают нажиматься, приложение невозможно свернуть и т.п.)


S3 | Critical
Критический — баг влияет на критический функционал или критические данные.
К критическому функционалу относятся функции приложения, без которого само приложение станет бессмысленным, либо перестанет выполнять свои основные функции.
Примеры критических функций в разных приложениях: 
1.	Баннера на сайте Х (приведение новых клиентов на сайт Y с использованием баннеров — основная функция сайта Х)
2.	Форма логина на сайте Y (без логина — клиент не может попасть на форму заказа и оформить его, а это одна из основных функция сайта Y)
3.	Форма оплаты на сайте Y (без формы оплаты — клиент не сможет оплатить свой заказ — самый критический функционал сайта Y)
Помимо критического функционала, к критическим багам относятся:
1.	“Дыры” в безопасности системы
2.	Полная / частичная потеря работоспособности системы на ощутимый промежуток времени, вызванная падением сервера
3.	Проблема, которую пользователь не сможет обойти своими силами
1.	например, если открытое модальное окно можно закрыть только нажатием на крестик, и нажатие не срабатывает на iOS
Примеры: 
1.	Указана неправильная ссылка на баннере в сайдбаре на странице Х
2.	Отсутствует ограничение максимальной длины вводимых в поле Name данных на странице Donate
3.	Показывается сообщение о серверной ошибке (503) на странице /signin после попытки логина
4.	Показывается сообщение NGINX 404 error на главной странице блога Y
5.	Не закрывается меню сайта после нажатия на крестик / черный фон


S2 | Major
Серьезный — баг не влияет на критический функционал, но создает неудобства при использовании приложения / системы.
К этому уровню относятся баги, связанные с:
1.	Некритическим функциональными требованиями
2.	Некритическим нефункциональными требованиями 
3.	Серьезными визуальными отклонениями в дизайне
Примеры:
1.	Не отображается плашка New на странице /order-details
2.	Не отображаются OG / Twitter microdata на странице X
3.	Неправильный порядок блоков “What we do?” и “How about now” на странице Х


S1 | Minor
Незначительный — баг не влияет на бизнес логику приложения.
Чаще всего к этому уровню относятся баги в реализации UI (верстке), отсутствие переводов и т.п.
Примеры:
1.	Не отображается ссылка /free-page в блоке “Free Products” в футере
2.	Не переносится на новую строку / Не обрезается текст ссылки “Our TOP 20 projects” в блоке «How it works?» на странице Х
3.	Не соответствует макету цвет текста в блоке Contact в футере  


S0 | Trivial
Тривиальный — баг никак не влияет на качество продукта.
Из-за того, что такие баги не влияют на качество продукта, преднамеренно их не исправляют (они не “окупаются”). Обычно, правку делают в ходе реализации смежной задачи.
Примеры:
1.	Отсутствует точка в конце предложения “This is whatever“ на странице Х
2.	Отображается не актуальный год в футере сайта Х

Типы багов
Дополнительный атрибут “Тип бага” необходим для обнаружения слабых мест в процессе разработки и тестирования, а также для их последующей корректировки. 
Используемые типы багов определяются в зависимости от направления, размера и сложности проекта.
Приведенные ниже типы багов относятся к WEB сайтам.

UI (ошибка в верстке)
Баг в верстке — следствие ошибки в разметке (HTML) или стилизации (CSS) элемента страницы в специфическом окружении. 
Примеры:
1.	Не отображается блок Х на странице Y (в дизайне блок есть, на странице — нет)
2.	Неправильное расположение блока на странице X (в дизайне блок слева, на странице — справа)
3.	Не переносится на новую строку / Не обрезается текст ссылки “Our TOP 20 projects” в блоке «How it works?» на странице Х

UX (ошибка в удобстве)
Баг в удобстве — неудобство / нелогичность работы с элементами / функционалом страницы.
Примеры:
1.	Не получается с первого раза нажать на кнопку Х в футере на мобильном (очень маленькая зона клика, кнопку нужно сделать больше)
2.	Удаляется заказ после нажатия на кнопку Х в модальном окне на странице Б (ожидаешь закрытия окна, а фактически удаляется заказ — UX путает)

Functional (ошибка в функционале)
Баг в функционале — несоответствие логики работы компонента заявленным функциональным требованиям.
Примеры:
1.	Отображается неправильное количество ссылок в блоке Related Papers в sidebar
1.	требование: выводить 5 ссылок
2.	фактически: выводится 10 ссылок
2.	Не происходит прокрутка страницы вверх после нажатия на кнопку To Top
1.	требование: происходит прокрутка страницы вверх после нажатия на кнопку To Top
2.	фактически: ничего не происходит
3.	Не показалось сообщение об ошибке при вводе числа в поле Name
1.	требование: допустимые символы для поля Name = буквы (обязательны) + пробелы (не обязательны). При вводе других символов — показываем сообщение об ошибке.
2.	фактически: сообщение об ошибке не отображается
4.	Не отображается модальное окно А после нажатия на кнопку Х
1.	требование: после нажатия на кнопку X показывается окно А
2.	фактически: после нажатия на кнопку X показывается окно С
5.	Не отображается текст “Нет заказов” на профиле райтера, если количество заказов, назначенных райтеру = 0
1.	требование: отображается текст “Нет заказов“, если количество заказов на профиле райтера = 0
2.	фактически: не отображается текст “Нет заказов“, если количество заказов на профиле райтера = 0

SEO (ошибка в seo)
Баг в seo — ошибка, которая влияет на SEO (нарушение нефункциональных требований, касающихся seo).
Примеры:
1.	Отображается неправильная структура заголовков блоков на странице Х
2.	Найдены 4 ошибки на странице Х после проверки в w3c валидаторе
3.	Указан неправильный title на странице Х
4.	Закрыта для индексации страница Х 
5.	Отсутствует атрибут ALT на изображении Z на странице Х


Алгоритм создания баг репорта
Предположим, Вы нашли баг и приступаете к написанию баг репорта. 
С чего начать?
Ниже приведен алгоритм, следуя которому Вы точно ничего не упустите и снизите вероятность создания дубликатов или некачественных отчетов.
1.	Понять “суть” проблемы, а не ее проявление (если получится, но это требует технических знаний)
2.	Воспроизвести дефект один-два раза (удостовериться, что он повторяется)
3.	Проверить наличие найденного вами дефекта в системе управления дефектами (возможно, баг уже создали)
4.	Написать заголовок (отвечает на вопросы “что? где? когда?”)
5.	Написать основные поля отчета
6.	Заполнить дополнительные поля отчета
7.	Внимательно прочитать отчет. Убрать лишнее, добавить нужное!
8.	Еще раз перечитать отчет! (самый важный пункт)
9.	Сохранить отчет
10.	Переназначить отчет либо проверяющему (если такой есть) либо разработчику (который будет исправлять ошибку)
 
Пример хорошего баг репорта (bug report example)
Предположим, в ходе исследовательского тестирования Вы заметили следующее:
 Пример UI дефекта (скриншот из баг репорта)
И Вы хотите создать отчет о найденном баге (нет перевода текстов ошибок). 
Итоговый вариант может выглядеть так:
Заголовок / Краткое описание / Тема / Summary / Title
Не переведены на украинский язык тексты ошибок (что?) на форме “Зворотний зв’язок” на странице https://itawards.ua/ua (где?) в UA версии сайта (когда?)
Скриншот / видео
Скриншот / ссылка на скриншот
Шаги к воспроизведению
1.	Открыть страницу https://itawards.ua/ua
2.	Проскролить к форме “Зворотний зв’язок”
3.	Нажать на кнопку “Надіслати”
4.	Обратить внимание на язык ошибок, которые появились под полями формы
Фактический результат
Отображаются ошибки на английском языке
Ожидаемый результат
Отображаются ошибки на украинском языке
Серьезность
S1 (minor)
Кто внимательно рассмотрел изображение с багом (или решил сам протестировать форму) — мог заметить еще несколько “странностей”. 
Например, некоторые тексты ошибок содержат грамматические ошибки, атрибуты полей содержат свойство autocomplete, которое не работает в большинстве браузеров, а анимация на форме зависает при наведении на любой из прямоугольников.
Может показаться, что это мелочи, и так оно и есть. Но если таких мелочей будет слишком много — продукт не будет вызывать доверия у клиента и его не будут считать качественным.
The Devil is in details.
________________________________________
  Если Вы хотите потренировать свой навык создания отчетов о дефекте и получить оценку с рекомендациями, Вы можете оставить заявку на получение практического задания по созданию баг-репортов.
 
Пример баг репорта в Jira
Jira является одной из самых распространённых систем управления проектами в мире и очень часто используется в ИТ.
Так может выглядеть описанный выше баг репорт в Jira:
 Пример баг репорта в Jira
________________________________________
Открыть полное изображение в новой вкладке
________________________________________
Здесь:
•	красным отмечены основные поля
•	синими отмечены дополнительные поля
Основные поля являются обязательными для заполнения при создании бага, без них задача просто не сохраниться  
Ошибки при создании баг репорта
Создание хороших баг репортов требует определенных знаний, навыков и опыта. 
Начинающим тестировщикам (и не только, как бы это ни было странно) иногда тяжело справляться с этой задачей, и они часто делают следующие ошибки:
1.	Заголовок не отвечает на вопросы “Что? Где? Когда?”
2.	Заголовок содержит лишнюю информацию (версии, окружения, учетные данные пользователей и т.п.)
3.	Отсутствуют шаги для воспроизведения
4.	Шаги для воспроизведения излишне детализированы
5.	Отсутствует фактический и / или ожидаемый результат
6.	Отсутствует ссылка на требование, которое проверялось (если такое есть)
7.	Отсутствие скриншота / видеозаписи для UI/UX багов (сюда можно также добавить отсутствие выделения ошибки на скриншоте)
8.	Грамматические ошибки / Техническая безграмотность / Использование “жаргона”
Знание типичных ошибок помогает проверять самого себя (можно создать чек-лист) и позволяет создавать более качественные отчеты без возвратов на доработку!

